import praw
import datetime
from config import smbconstants as config

config.SUBREDDIT = config.SUBREDDIT.lower()
TIMELAPSE = config.NUM_HOURS * 60 * 60

def get_report_data(mentions):
    report = {}
    for mention in mentions:
        subr_name = mention.subreddit.display_name
        subr_key = subr_name.lower()
        report[subr_key] = report.get(subr_key, 0) + 1
        if subr_key + "|links" not in report:
            report[subr_key + "|links"] = []
        report[subr_key + "|links"].append(mention.permalink)
        report[subr_key + "|name"] = subr_name
    return report

def print_report(report):
    report_message = ""
    report_message = report_message + "Subreddit|Mentions|Links\n"
    report_message = report_message + ":--|--:|:--\n"
    if len(report) > 0 and not (len(report) == 3 and config.SUBREDDIT in report): # skip if the only reference is in our target subreddit
        for key, value in report.items():
            if "|links" in key or "|name" in key:
                continue
            if key == config.SUBREDDIT:
                continue
            report_message = report_message + report[key + "|name"] + "|" + str(value) + "|"
            linklist = report[key + "|links"]
            i = 1
            for link in linklist:
                report_message = report_message + "[" + str(i) + "](" + link + ") "
                i = i + 1
            report_message = report_message + "\n"
    else:
        report_message = report_message + "None|0|N/A\n"
    report_message = report_message + "\n"
    return report_message

def subs_and_cmts(subreddit, **kwargs):
    results = []
    results.extend(subreddit.new(**kwargs))
    results.extend(subreddit.comments(**kwargs))
    results.sort(key=lambda post: post.created_utc, reverse=True)
    return results

r = praw.Reddit(user_agent=config.USER_AGENT, client_id=config.CLIENT_ID, client_secret=config.CLIENT_SECRET, username=config.REDDIT_USER, password=config.REDDIT_PW)

mentions = []
last_time = None
posts_evald = []

try:
    while True:
        # get recent posts and comments
        strm = praw.models.util.stream_generator(lambda **kwargs: subs_and_cmts(r.subreddit('all'), **kwargs))
        # check bodies of posts
        print("Beginning post stream...")
        for post in strm:
            time = datetime.datetime.utcnow()
            if last_time != None:
                timeDelt = time - last_time
                if (timeDelt.total_seconds() > TIMELAPSE): # 12 hours by default
                    print("Sending report!")
                    post_report = get_report_data(mentions)
                    # send the message
                    report_message = "Hi r/" + config.SUBREDDIT + " mods!\n\nThis is your twice-daily report on references to the subreddit"
                    report_message = report_message + " throughout Reddit. This does NOT include cross-posts, which are generally handled"
                    report_message = report_message + " by other means, but it does include direct post or comment linking.\n\n"
                    report_message = report_message + print_report(post_report)
                    report_message = report_message + "This report generated by the Brigade Warning Bot. Contact /u/" + config.ADMIN_USER
                    report_message = report_message + " with issues or questions.\n\nTime covered: from " + last_time.ctime() + " UTC to "
                    report_message = report_message + time.ctime() + " UTC."
                    # r.subreddit(config.SUBREDDIT).message('12 hour mention report',report_message)
                    r.redditor(config.ADMIN_USER).message('12 hour mention report',report_message)
                    # clear the lists
                    mentions.clear()
                    # update the timestamp
                    last_time = time
                    print("New loop begins: ",last_time.ctime())
            else:
                last_time = time
                print("Time begins: ",last_time.ctime())
            #print(" - ",post.id)
            if post.id not in posts_evald:
                if isinstance(post,praw.models.Submission):
                    if "r/" + config.SUBREDDIT in post.selftext.lower():
                        mentions.append(post)
                else:
                    if "r/" + config.SUBREDDIT in post.body.lower():
                        mentions.append(post)
                posts_evald.append(post.id)
except Exception as e:
    r.redditor(config.ADMIN_USER).message('HELP!',e)